// FULL REPLACEMENT for server.js

const express = require('express');
const cors = require('cors');
require('dotenv').config();

const app = express();
const port = 3000;

app.use(cors());
app.use(express.json());
app.use(express.static(__dirname));

app.post('/api/chat', async (req, res) => {
    // Get the user's messages and selected model from the frontend's request
    const { model, messages } = req.body;

    // --- NEW Key-Switching Logic ---
    let apiKey;
    if (model.startsWith('google/')) {
        // If the model is from Google, use the Gemini key
        apiKey = process.env.GEMINI_API_KEY;
    } else {
        // For all other models, use the OpenRouter key
        apiKey = process.env.OPENROUTER_API_KEY;
    }

    if (!apiKey) {
        const missingKeyType = model.startsWith('google/') ? 'GEMINI_API_KEY' : 'OPENROUTER_API_KEY';
        return res.status(500).json({ error: `API key (${missingKeyType}) is not configured on the server.` });
    }
    // --- End of NEW Logic ---

    try {
        // Determine the correct API endpoint
        // Google models might have a different base URL if not used via OpenRouter, but for now we assume all go through OpenRouter's endpoint
        const apiUrl = "https://openrouter.ai/api/v1/chat/completions";

        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
                // Use the dynamically selected apiKey
                'Authorization': `Bearer ${apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                model: model,
                messages: messages
            })
        });

        if (!response.ok) {
            const errorData = await response.json();
            return res.status(response.status).json(errorData);
        }

        const data = await response.json();
        res.json(data);

    } catch (error) {
        console.error('Server Error:', error);
        res.status(500).json({ error: 'Failed to connect to the AI service.' });
    }
});

app.get('/', (req, res) => {
    res.sendFile(__dirname + '/index.html');
});

app.listen(port, () => {
    console.log(`Server is running at http://localhost:${port}`);
console.log('--- Checking Environment Variables ---');
console.log('OpenRouter Key Loaded:', process.env.OPENROUTER_API_KEY);
console.log('Gemini Key Loaded:    ', process.env.GEMINI_API_KEY);
console.log('------------------------------------');
});